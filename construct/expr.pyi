from typing import (
    Any,
    Optional as TypingOptional,
    TypeVar,
    Dict,
    Callable,
    Union as TypingUnion,
    Mapping as TypingMapping,
)

_T = TypeVar("_T")

BinaryOp = Callable[[_T, _T], _T]
UnaryOp = Callable[[_T], _T]

opnames: Dict[TypingUnion[BinaryOp, UnaryOp], str]

class ExprMixin:
    def __add__(self, other: Any) -> "BinExpr": ...
    def __sub__(self, other: Any) -> "BinExpr": ...
    def __mul__(self, other: Any) -> "BinExpr": ...
    def __floordiv__(self, other: Any) -> "BinExpr": ...
    def __truediv__(self, other: Any) -> "BinExpr": ...
    def __div__(self, other: Any) -> "BinExpr": ...
    def __mod__(self, other: Any) -> "BinExpr": ...
    def __pow__(self, other: Any) -> "BinExpr": ...
    def __xor__(self, other: Any) -> "BinExpr": ...
    def __rshift__(self, other: Any) -> "BinExpr": ...
    def __lshift__(self, other: Any) -> "BinExpr": ...
    def __and__(self, other: Any) -> "BinExpr": ...
    def __or__(self, other: Any) -> "BinExpr": ...
    def __radd__(self, other: Any) -> "BinExpr": ...
    def __rsub__(self, other: Any) -> "BinExpr": ...
    def __rmul__(self, other: Any) -> "BinExpr": ...
    def __rfloordiv__(self, other: Any) -> "BinExpr": ...
    def __rtruediv__(self, other: Any) -> "BinExpr": ...
    def __rdiv__(self, other: Any) -> "BinExpr": ...
    def __rmod__(self, other: Any) -> "BinExpr": ...
    def __rpow__(self, other: Any) -> "BinExpr": ...
    def __rxor__(self, other: Any) -> "BinExpr": ...
    def __rrshift__(self, other: Any) -> "BinExpr": ...
    def __rlshift__(self, other: Any) -> "BinExpr": ...
    def __rand__(self, other: Any) -> "BinExpr": ...
    def __ror__(self, other: Any) -> "BinExpr": ...
    def __neg__(self) -> "UniExpr": ...
    def __pos__(self) -> "UniExpr": ...
    def __invert__(self) -> "UniExpr": ...
    def __inv__(self) -> "UniExpr": ...
    def __contains__(self, other: Any) -> "BinExpr": ...
    def __gt__(self, other: Any) -> "BinExpr": ...
    def __ge__(self, other: Any) -> "BinExpr": ...
    def __lt__(self, other: Any) -> "BinExpr": ...
    def __le__(self, other: Any) -> "BinExpr": ...
    def __eq__(self, other: Any) -> "BinExpr": ...  # type: ignore
    def __ne__(self, other: Any) -> "BinExpr": ...  # type: ignore
    def __getstate__(self) -> Dict[str, Any]: ...
    def __setstate__(self, attrs: TypingMapping[str, Any]) -> None: ...

class UniExpr(ExprMixin):
    op: UnaryOp = ...
    operand: Any = ...
    def __init__(self, op: UnaryOp, operand: Any) -> None: ...
    def __repr__(self): ...
    def __str__(self): ...
    def __call__(self, obj: Any, *args: Any) -> Any: ...

class BinExpr(ExprMixin):
    op: BinaryOp = ...
    lhs: Any = ...
    rhs: Any = ...
    def __init__(self, op: BinaryOp, lhs: Any, rhs: Any) -> None: ...
    def __repr__(self): ...
    def __str__(self): ...
    def __call__(self, obj: Any, *args: Any) -> Any: ...

class Path(ExprMixin):
    __name: Any = ...
    __field: Any = ...
    __parent: Any = ...
    def __init__(
        self,
        name: Any,
        field: TypingOptional[Any] = ...,
        parent: TypingOptional[Any] = ...,
    ) -> None: ...
    def __repr__(self): ...
    def __str__(self): ...
    def __call__(self, obj: Any, *args: Any): ...
    def __getfield__(self): ...
    def __getattr__(self, name: Any) -> "Path": ...
    def __getitem__(self, name: Any) -> "Path": ...

class Path2(ExprMixin):
    __name: Any = ...
    __index: Any = ...
    __parent: Any = ...
    def __init__(
        self,
        name: Any,
        index: TypingOptional[Any] = ...,
        parent: TypingOptional[Any] = ...,
    ) -> None: ...
    def __repr__(self): ...
    def __call__(self, *args: Any): ...
    def __getitem__(self, index: Any) -> "Path2": ...

class FuncPath(ExprMixin):
    __func: Any = ...
    __operand: Any = ...
    def __init__(self, func: Any, operand: TypingOptional[Any] = ...) -> None: ...
    def __repr__(self): ...
    def __str__(self): ...
    def __call__(self, operand: Any, *args: Any): ...

this: Path
obj_: Path
list_: Path2
len_: FuncPath
sum_: FuncPath
min_: FuncPath
max_: FuncPath
abs_: FuncPath
